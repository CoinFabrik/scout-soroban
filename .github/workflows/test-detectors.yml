name: Test Detectors

on:
  push:
    branches:
      - "main"
    paths:
      - "detectors/**"
      - "test-cases/**"
  pull_request:
    paths:
      - "detectors/**"
      - "test-cases/**"

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  PYTHONUNBUFFERED: 1

jobs:
  validate-detectors:
    name: Validate
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: pip install fuzzywuzzy

      - name: Validate detectors
        run: python scripts/validate-detectors.py

  build:
    name: Build
    needs: validate-detectors
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    outputs:
      ubuntu-status: ${{ (matrix.os == 'ubuntu-latest' && job.status) || 'not-applicable' }}
      macos-status: ${{ (matrix.os == 'macos-latest' && job.status) || 'not-applicable' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            **/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Update Rust Toolchain
        run: rustup update

      - name: Install Rust nightly
        run: rustup install nightly --profile minimal

      - name: Install dylint, dylint-link and cargo-scout-audit
        run: cargo +nightly install cargo-dylint dylint-link cargo-scout-audit

  prepare-detector-matrix:
    name: Prepare Detector Matrix
    runs-on: ubuntu-latest
    needs: build
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: set-matrix
        working-directory: test-cases
        run: |
          echo "matrix=$(find . -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -cs 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  test:
    name: Test detector
    needs: [build, prepare-detector-matrix]
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        detector: ${{fromJson(needs.prepare-detector-matrix.outputs.matrix)}}
    runs-on: ${{ matrix.os }}
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache build artifacts for ${{ matrix.detector }}
        uses: actions/cache@v4
        with:
          path: |
            test-cases/${{ matrix.detector }}/**/target
          key: ${{ runner.os }}-${{ matrix.detector }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.detector }}-

      - name: Run unit tests for a specific detector
        run: python scripts/run-tests.py --detector=${{ matrix.detector }}

  comment-on-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [validate-detectors, build, test]
    steps:
      - name: Create or Update PR Comment
        uses: peter-evans/create-or-update-comment@v4.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            🎉 **Test Detectors Workflow Summary** 🎉

            | Component               | Status |
            |-------------------------|--------|
            | Detector Validation     | ${{ (needs.validate-detectors.outputs.status == 'success' && '✅ Successful') || '❌ Failed' }} |
            | Build on Ubuntu         | ${{ (needs.build.outputs.ubuntu-status == 'success' && '✅ Successful') || '❌ Failed' }} |
            | Build on macOS          | ${{ (needs.build.outputs.macos-status == 'success' && '✅ Successful') || '❌ Failed' }} |
            | Tests Execution         | ${{ (needs.test.outputs.status == 'success' && '✅ Successful') || '❌ Failed' }} |

            The workflow has completed. Please check the statuses above for more details. Great job! 🚀
