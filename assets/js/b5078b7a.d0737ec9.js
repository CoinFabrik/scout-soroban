"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[4957],{9613:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>f});var t=r(9496);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=t.createContext({}),s=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=s(e.components);return t.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=a,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||i;return r?t.createElement(f,o(o({ref:n},c),{},{components:r})):t.createElement(f,o({ref:n},c))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9255:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var t=r(2564),a=(r(9496),r(9613));const i={},o="Unused return enum",l={unversionedId:"vulnerabilities/unused-return-enum",id:"vulnerabilities/unused-return-enum",title:"Unused return enum",description:"Description",source:"@site/docs/vulnerabilities/13-unused-return-enum.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/unused-return-enum",permalink:"/scout-soroban/docs/vulnerabilities/unused-return-enum",draft:!1,editUrl:"https://github.com/CoinFabrik/scout-soroban/docs/vulnerabilities/13-unused-return-enum.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Soroban version",permalink:"/scout-soroban/docs/vulnerabilities/soroban-version"},next:{title:"Iterators over indexing",permalink:"/scout-soroban/docs/vulnerabilities/iterators-over-indexing"}},u={},s=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Remediation",id:"remediation",level:2}],c={toc:s},p="wrapper";function d(e){let{components:n,...r}=e;return(0,a.kt)(p,(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"unused-return-enum"},"Unused return enum"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,a.kt)("inlineCode",{parentName:"li"},"Validations and error handling")),(0,a.kt)("li",{parentName:"ul"},"Vulnerability Severity: ",(0,a.kt)("inlineCode",{parentName:"li"},"Minor")),(0,a.kt)("li",{parentName:"ul"},"Detectors: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/unused-return-enum"},(0,a.kt)("inlineCode",{parentName:"a"},"unused-return-enum"))),(0,a.kt)("li",{parentName:"ul"},"Test Cases: ",(0,a.kt)("a",{parentName:"li",href:"hhttps://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/avoid-panic-error/avoid-panic-error-1/remediated-example"},(0,a.kt)("inlineCode",{parentName:"a"},"unused-return-enum-1")))),(0,a.kt)("p",null,"Soroban\t messages can return a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum with a custom error type. This is\nuseful for the caller to know what went wrong when the message fails. The\ndefinition in Rust of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n")),(0,a.kt)("p",null,"If any of the variants is not used, the code could be simplified or it could\nimply a bug."),(0,a.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,a.kt)("p",null,"In order to perform this exploit we work through the following example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord)]\n#[repr(u32)]\npub enum Error {\n    /// An overflow was produced.\n    Overflow = 1,\n}\n\n\n\npub fn get_percentage_difference(balance1: u128, balance2: u128) -> Result<u128, Error> {\n        let absolute_difference = balance1.abs_diff(balance2);\n        let sum = balance1 + balance2;\n\n        match 100u128.checked_mul(absolute_difference / sum) {\n            Some(result) => result,\n            None => panic!("Overflow"),\n        };\n\n        Err(Error::Overflow)\n    }   \n')),(0,a.kt)("p",null,"This is a ",(0,a.kt)("inlineCode",{parentName:"p"},"Soroban")," message that returns the percentage difference between two values."),(0,a.kt)("p",null,"The function then returns an error enum variant ",(0,a.kt)("inlineCode",{parentName:"p"},"TradingPairErrors::Overflow"),".\nHowever, the function never returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum variant ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok"),", thus always\nfailing."),(0,a.kt)("p",null,"The vulnerable code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/avoid-panic-error/avoid-panic-error-1/remediated-example"},"here"),"."),(0,a.kt)("h2",{id:"remediation"},"Remediation"),(0,a.kt)("p",null,"This function could be easily fixed by returning a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum variant ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok"),"\nwhen the percentage difference is calculated successfully. By providing a check in\nthe linter that ensures that all the variants of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum are used, this\nbug could have been avoided. This is shown in the example below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord)]\n#[repr(u32)]\npub enum Error {\n    /// An overflow was produced.\n    Overflow = 1,\n}\n\n\npub fn get_percentage_difference(balance1: u128, balance2: u128) -> Result<u128, Error> {\n        let absolute_difference = balance1.abs_diff(balance2);\n        let sum = balance1 + balance2;\n\n        match 100u128.checked_mul(absolute_difference / sum) {\n            Some(result) => Ok(result),\n            None => Err(Error::Overflow),\n        }\n    }\n")),(0,a.kt)("p",null,"The remediated code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/avoid-panic-error/avoid-panic-error-1/remediated-example/src"},"here"),"."))}d.isMDXComponent=!0}}]);