"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[8186],{9613:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),c=p(t),f=a,d=c["".concat(l,".").concat(f)]||c[f]||m[f]||o;return t?r.createElement(d,i(i({ref:n},s),{},{components:t})):r.createElement(d,i({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u[c]="string"==typeof e?e:a,i[1]=u;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7876:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var r=t(2564),a=(t(9496),t(9613));const o={},i="Unsafe unwrap",u={unversionedId:"vulnerabilities/unsafe-unwrap",id:"vulnerabilities/unsafe-unwrap",title:"Unsafe unwrap",description:"Description",source:"@site/docs/vulnerabilities/2-unsafe-unwrap.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/unsafe-unwrap",permalink:"/scout-soroban/docs/vulnerabilities/unsafe-unwrap",draft:!1,editUrl:"https://github.com/CoinFabrik/scout-soroban/docs/vulnerabilities/2-unsafe-unwrap.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Divide before multiply",permalink:"/scout-soroban/docs/vulnerabilities/divide-before-multiply"},next:{title:"Unsafe expect",permalink:"/scout-soroban/docs/vulnerabilities/unsafe-expect"}},l={},p=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Remediation",id:"remediation",level:2},{value:"References",id:"references",level:2}],s={toc:p},c="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"unsafe-unwrap"},"Unsafe unwrap"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,a.kt)("inlineCode",{parentName:"li"},"Validations and error handling")),(0,a.kt)("li",{parentName:"ul"},"Vulnerability Severity: ",(0,a.kt)("inlineCode",{parentName:"li"},"Minor")),(0,a.kt)("li",{parentName:"ul"},"Detectors: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/unsafe-unwrap"},(0,a.kt)("inlineCode",{parentName:"a"},"unsafe-unwrap"))),(0,a.kt)("li",{parentName:"ul"},"Test Cases: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-1"},(0,a.kt)("inlineCode",{parentName:"a"},"unsafe-unwrap-1"))," ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-2"},(0,a.kt)("inlineCode",{parentName:"a"},"unsafe-unwrap-2"))," ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-3"},(0,a.kt)("inlineCode",{parentName:"a"},"unsafe-unwrap-3"))," ")),(0,a.kt)("p",null,"In Rust, the ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap")," method is commonly used for error handling. It retrieves the inner value of an ",(0,a.kt)("inlineCode",{parentName:"p"},"Option")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Result"),". If an error or ",(0,a.kt)("inlineCode",{parentName:"p"},"None")," occurs, it calls ",(0,a.kt)("inlineCode",{parentName:"p"},"panic!")," without a custom error message."),(0,a.kt)("p",null,"The usage of ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap")," can lead to a panic and crash the program, which is not desired behavior in most cases, particularly in smart contracts."),(0,a.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,a.kt)("p",null,"Consider the following ",(0,a.kt)("inlineCode",{parentName:"p"},"Soroban")," contract:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[contractimpl]\nimpl UnsafeUnwrap {\n    pub fn unwrap(n: u64) -> u64 {\n        let result = Self::non_zero_or_error(n);\n        result.unwrap()\n    }\n\n    pub fn non_zero_or_error(n: u64) -> Result<u64, Error> {\n        if n == 0 {\n            return Err(Error::CustomError);\n        }\n        Ok(n)\n    }\n}\n")),(0,a.kt)("p",null,"In this contract, the ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap")," function uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap")," method to save the result of the ",(0,a.kt)("inlineCode",{parentName:"p"},"non_zero_or_error")," function. If the function returns ",(0,a.kt)("inlineCode",{parentName:"p"},"Err"),", the contract will panic and halt execution, potentially leading to malicious exploitation to disrupt the contract's operation."),(0,a.kt)("p",null,"The vulnerable code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-1/vulnerable-example"},(0,a.kt)("inlineCode",{parentName:"a"},"here")),"."),(0,a.kt)("h2",{id:"remediation"},"Remediation"),(0,a.kt)("p",null,"Instead of using ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap"),", use a safer method for error handling. In this case, if the function returns ",(0,a.kt)("inlineCode",{parentName:"p"},"Err"),", it will return a default value (like ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[contractimpl]\nimpl UnsafeUnwrap {\n    pub fn unwrap_or_default(n: u64) -> u64 {\n        let result = Self::non_zero_or_error(n);\n        result.unwrap_or(0)\n    }\n\n    pub fn non_zero_or_error(n: u64) -> Result<u64, Error> {\n        if n == 0 {\n            return Err(Error::CustomError);\n        }\n        Ok(n)\n    }\n}\n")),(0,a.kt)("p",null,"The remediated code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-1/remediated-example"},(0,a.kt)("inlineCode",{parentName:"a"},"here")),"."),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap"},"Rust documentation: ",(0,a.kt)("inlineCode",{parentName:"a"},"unwrap"))))}m.isMDXComponent=!0}}]);