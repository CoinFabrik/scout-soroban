"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[845],{9613:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(9496);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return t?r.createElement(f,u(u({ref:n},c),{},{components:t})):r.createElement(f,u({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,u=new Array(a);u[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:o,u[1]=i;for(var s=2;s<a;s++)u[s]=t[s];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7020:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>u,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=t(2564),o=(t(9496),t(9613));const a={},u="Unused return enum",i={unversionedId:"detectors/unused-return-enum",id:"detectors/unused-return-enum",title:"Unused return enum",description:"What it does",source:"@site/docs/detectors/13-unused-return-enum.md",sourceDirName:"detectors",slug:"/detectors/unused-return-enum",permalink:"/scout-soroban/docs/detectors/unused-return-enum",draft:!1,editUrl:"https://github.com/CoinFabrik/scout-soroban/docs/detectors/13-unused-return-enum.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Soroban version",permalink:"/scout-soroban/docs/detectors/soroban-version"},next:{title:"Contribute",permalink:"/scout-soroban/docs/contribute"}},l={},s=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Known problems",id:"known-problems",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}],c={toc:s},d="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"unused-return-enum"},"Unused return enum"),(0,o.kt)("h3",{id:"what-it-does"},"What it does"),(0,o.kt)("p",null,"It warns if a function that returns a Result type does not return the Result enum variant (Ok/Err)."),(0,o.kt)("h3",{id:"why-is-this-bad"},"Why is this bad?"),(0,o.kt)("p",null,"If any of the variants (Ok/Err) is not used, the code could be simplified or it could imply a bug."),(0,o.kt)("h3",{id:"known-problems"},"Known problems"),(0,o.kt)("p",null,"If definitions of ",(0,o.kt)("inlineCode",{parentName:"p"},"Err()")," and/or ",(0,o.kt)("inlineCode",{parentName:"p"},"Ok()")," are in the code but do not flow to the return value due to the definition of a variable or because they are defined in a dead code block, the warning will not be shown. If the definitions are made in an auxiliary method, the warning will be shown, resulting in a false positive."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("p",null,"Instead of using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#![no_std]\n\nuse soroban_sdk::{contract, contracterror, contractimpl};\n\n#[contract]\npub struct UnusedReturnEnum;\n\n#[contracterror]\n#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord)]\n#[repr(u32)]\npub enum Error {\n    /// An overflow was produced.\n    Overflow = 1,\n}\n\n#[contractimpl]\nimpl UnusedReturnEnum {\n    /// Returns the percentage difference between two values.\n    pub fn get_percentage_difference(balance1: u128, balance2: u128) -> Result<u128, Error> {\n        let absolute_difference = balance1.abs_diff(balance2);\n        let sum = balance1 + balance2;\n\n        match 100u128.checked_mul(absolute_difference / sum) {\n            Some(result) => result,\n            None => panic!("Overflow"),\n        };\n\n        Err(Error::Overflow)\n    }\n}\n')),(0,o.kt)("p",null,"Use this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#![no_std]\n\nuse soroban_sdk::{contract, contracterror, contractimpl, testutils::arbitrary::arbitrary::Result};\n\n#[contract]\npub struct UnusedReturnEnum;\n\n#[contracterror]\n#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord)]\n#[repr(u32)]\npub enum Error {\n    /// An overflow was produced.\n    Overflow = 1,\n}\n\n#[contractimpl]\nimpl UnusedReturnEnum {\n    /// Returns the percentage difference between two values.\n    pub fn get_percentage_difference(balance1: u128, balance2: u128) -> Result<u128, Error> {\n        let absolute_difference = balance1.abs_diff(balance2);\n        let sum = balance1 + balance2;\n\n        match 100u128.checked_mul(absolute_difference / sum) {\n            Some(result) => Ok(result),\n            None => Err(Error::Overflow),\n        }\n    }\n}\n")),(0,o.kt)("h3",{id:"implementation"},"Implementation"),(0,o.kt)("p",null,"The detector's implementation can be found at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/unused-return-enum"},"this link"),"."))}p.isMDXComponent=!0}}]);