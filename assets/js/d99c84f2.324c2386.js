"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[8967],{9613:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,f=c["".concat(u,".").concat(m)]||c[m]||d[m]||o;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},538:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(2564),a=(t(9496),t(9613));const o={},i="Unsafe unwrap",s={unversionedId:"detectors/unsafe-unwrap",id:"detectors/unsafe-unwrap",title:"Unsafe unwrap",description:"Description",source:"@site/docs/detectors/2-unsafe-unwrap.md",sourceDirName:"detectors",slug:"/detectors/unsafe-unwrap",permalink:"/scout-soroban/docs/detectors/unsafe-unwrap",draft:!1,editUrl:"https://github.com/CoinFabrik/scout-soroban/docs/detectors/2-unsafe-unwrap.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Divide before multiply",permalink:"/scout-soroban/docs/detectors/divide-before-multiply"},next:{title:"Unsafe expect",permalink:"/scout-soroban/docs/detectors/unsafe-expect"}},u={},p=[{value:"Description",id:"description",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"Issue example",id:"issue-example",level:2},{value:"Remediated example",id:"remediated-example",level:2},{value:"How is it detected?",id:"how-is-it-detected",level:2},{value:"References",id:"references",level:2}],l={toc:p},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"unsafe-unwrap"},"Unsafe unwrap"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Category: ",(0,a.kt)("inlineCode",{parentName:"li"},"Validations and error handling")),(0,a.kt)("li",{parentName:"ul"},"Severity: ",(0,a.kt)("inlineCode",{parentName:"li"},"Minor")),(0,a.kt)("li",{parentName:"ul"},"Detectors: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/unsafe-unwrap"},(0,a.kt)("inlineCode",{parentName:"a"},"unsafe-unwrap"))),(0,a.kt)("li",{parentName:"ul"},"Test Cases: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-1"},(0,a.kt)("inlineCode",{parentName:"a"},"unsafe-unwrap-1"))," ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-2"},(0,a.kt)("inlineCode",{parentName:"a"},"unsafe-unwrap-2"))," ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-3"},(0,a.kt)("inlineCode",{parentName:"a"},"unsafe-unwrap-3")),"  ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-4"},(0,a.kt)("inlineCode",{parentName:"a"},"unsafe-unwrap-4")),"  ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-5"},(0,a.kt)("inlineCode",{parentName:"a"},"unsafe-unwrap-5")),"  ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-6"},(0,a.kt)("inlineCode",{parentName:"a"},"unsafe-unwrap-6"))," ")),(0,a.kt)("p",null,"In Rust, the ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap")," method is commonly used for error handling. It retrieves the inner value of an ",(0,a.kt)("inlineCode",{parentName:"p"},"Option")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Result"),". If an error or ",(0,a.kt)("inlineCode",{parentName:"p"},"None")," occurs, it calls ",(0,a.kt)("inlineCode",{parentName:"p"},"panic!")," without a custom error message."),(0,a.kt)("h2",{id:"why-is-this-bad"},"Why is this bad?"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},".unwrap()")," might panic if the result value is an error or ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),". It is recommended to avoid the panic of a contract because it stops its execution, which might lead the contract to an inconsistent state if the panic occurs in the middle of state changes. Additionally, the panic could cause a transaction to fail."),(0,a.kt)("h2",{id:"issue-example"},"Issue example"),(0,a.kt)("p",null,"Consider the following ",(0,a.kt)("inlineCode",{parentName:"p"},"Soroban")," contract:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[contractimpl]\nimpl UnsafeUnwrap {\n    pub fn unwrap(n: u64) -> u64 {\n        let result = Self::non_zero_or_error(n);\n        result.unwrap()\n    }\n\n    pub fn non_zero_or_error(n: u64) -> Result<u64, Error> {\n        if n == 0 {\n            return Err(Error::CustomError);\n        }\n        Ok(n)\n    }\n}\n")),(0,a.kt)("p",null,"In this contract, the ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap")," function uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap")," method to save the result of the ",(0,a.kt)("inlineCode",{parentName:"p"},"non_zero_or_error")," function. If the function returns ",(0,a.kt)("inlineCode",{parentName:"p"},"Err"),", the contract will panic and halt execution, potentially leading to malicious exploitation to disrupt the contract's operation."),(0,a.kt)("p",null,"The code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-1/vulnerable-example"},"here"),"."),(0,a.kt)("h2",{id:"remediated-example"},"Remediated example"),(0,a.kt)("p",null,"Instead of using ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap"),", use a safer method for error handling. In this case, if the function returns ",(0,a.kt)("inlineCode",{parentName:"p"},"Err"),", it will return a default value (like ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[contractimpl]\nimpl UnsafeUnwrap {\n    pub fn unwrap_or_default(n: u64) -> u64 {\n        let result = Self::non_zero_or_error(n);\n        result.unwrap_or(0)\n    }\n\n    pub fn non_zero_or_error(n: u64) -> Result<u64, Error> {\n        if n == 0 {\n            return Err(Error::CustomError);\n        }\n        Ok(n)\n    }\n}\n")),(0,a.kt)("p",null,"The remediated code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unsafe-unwrap/unsafe-unwrap-1/remediated-example"},"here"),"."),(0,a.kt)("h2",{id:"how-is-it-detected"},"How is it detected?"),(0,a.kt)("p",null,"Checks for usage of .unwrap()"),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap"},"Rust documentation: ",(0,a.kt)("inlineCode",{parentName:"a"},"unwrap"))))}d.isMDXComponent=!0}}]);