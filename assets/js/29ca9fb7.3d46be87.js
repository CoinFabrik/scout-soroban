"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[6167],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),d=a,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2122:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(2564),a=(n(9496),n(9613));const o={},i="Set contract storage",c={unversionedId:"vulnerabilities/set-contract-storage",id:"vulnerabilities/set-contract-storage",title:"Set contract storage",description:"Description",source:"@site/docs/vulnerabilities/8-set-contract-storage.md",sourceDirName:"vulnerabilities",slug:"/vulnerabilities/set-contract-storage",permalink:"/scout-soroban/docs/vulnerabilities/set-contract-storage",draft:!1,editUrl:"https://github.com/CoinFabrik/scout-soroban/docs/vulnerabilities/8-set-contract-storage.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Unprotected update current contract wasm",permalink:"/scout-soroban/docs/vulnerabilities/unprotected-update-current-contract-wasm"},next:{title:"Avoid unsafe block",permalink:"/scout-soroban/docs/vulnerabilities/avoid-unsafe-block"}},s={},l=[{value:"Description",id:"description",level:2},{value:"Exploit Scenario",id:"exploit-scenario",level:2},{value:"Remediation",id:"remediation",level:2}],u={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"set-contract-storage"},"Set contract storage"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,a.kt)("inlineCode",{parentName:"li"},"Authorization")),(0,a.kt)("li",{parentName:"ul"},"Severity: ",(0,a.kt)("inlineCode",{parentName:"li"},"Critical")),(0,a.kt)("li",{parentName:"ul"},"Detectors: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/set-contract-storage"},(0,a.kt)("inlineCode",{parentName:"a"},"set-contract-storage"))),(0,a.kt)("li",{parentName:"ul"},"Test Cases: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/set-contract-storage/set-contract-storage-1"},(0,a.kt)("inlineCode",{parentName:"a"},"set-contract-storage-1"))," ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/set-contract-storage/set-contract-storage-2"},(0,a.kt)("inlineCode",{parentName:"a"},"set-contract-storage-2"))," ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/set-contract-storage/set-contract-storage-3"},(0,a.kt)("inlineCode",{parentName:"a"},"set-contract-storage-3")))),(0,a.kt)("p",null,"Smart contract can store important information in memory which changes\nthrough the contract's lifecycle. Changes happen via user interaction with\nthe smart contract. An ",(0,a.kt)("em",{parentName:"p"},"unauthorized set contract storage")," vulnerability\nhappens when a smart contract call allows a user to set or modify contract\nmemory when he was not supposed to be authorized."),(0,a.kt)("h2",{id:"exploit-scenario"},"Exploit Scenario"),(0,a.kt)("p",null,"In this example we see that any user may access the\n",(0,a.kt)("inlineCode",{parentName:"p"},"SetContractStorage()")," function, and therefore modify the value of the internal counter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[contractimpl]\nimpl SetContractStorage {\n    /// Increment an internal counter; return the new value.\n    pub fn increment(env: Env, user: Address) -> u32 {\n        let storage = env.storage().instance();\n        let mut count: u32 = storage.get(&user).unwrap_or_default();\n        count += 1;\n        storage.set(&user, &count);\n        storage.extend_ttl(100, 100);\n        count\n    }\n}\n")),(0,a.kt)("p",null,"The vulnerable code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/set-contract-storage/set-contract-storage-1/vulnerable-example"},"here"),"."),(0,a.kt)("h2",{id:"remediation"},"Remediation"),(0,a.kt)("p",null,"Arbitrary users should not have control over keys because it implies writing\nany value of a mapping, lazy variable, or the main struct of the contract\nlocated in position 0 of the storage.\nTo prevent this issue, set access control and proper authorization validation\nfor the ",(0,a.kt)("inlineCode",{parentName:"p"},"SetContractStorage()")," function. "),(0,a.kt)("p",null,"For example, the code below, ensures only the authorized users can call\n",(0,a.kt)("inlineCode",{parentName:"p"},"SetContractStorage()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[contractimpl]\nimpl SetContractStorage {\n    /// Increment an internal counter; return the new value.\n    pub fn increment(env: Env, user: Address) -> u32 {\n        user.require_auth();\n        let storage = env.storage().instance();\n        let mut count: u32 = storage.get(&user).unwrap_or_default();\n        count += 1;\n        storage.set(&user, &count);\n        storage.extend_ttl(100, 100);\n        count\n    }\n}\n")),(0,a.kt)("p",null,"The remediated code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/set-contract-storage/set-contract-storage-1/remediated-example"},"here"),"."))}m.isMDXComponent=!0}}]);