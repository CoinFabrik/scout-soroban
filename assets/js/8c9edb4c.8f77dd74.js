"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[8247],{9613:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(9496);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(r),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return r?n.createElement(f,a(a({ref:t},u),{},{components:r})):n.createElement(f,a({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4835:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(2564),o=(r(9496),r(9613));const i={},a="Iterators-over-indexing",s={unversionedId:"detectors/iterators-over-indexing",id:"detectors/iterators-over-indexing",title:"Iterators-over-indexing",description:"What it does",source:"@site/docs/detectors/14-iterators-over-indexing.md",sourceDirName:"detectors",slug:"/detectors/iterators-over-indexing",permalink:"/scout-soroban/docs/detectors/iterators-over-indexing",draft:!1,editUrl:"https://github.com/CoinFabrik/scout-soroban/docs/detectors/14-iterators-over-indexing.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Unused return enum",permalink:"/scout-soroban/docs/detectors/unused-return-enum"},next:{title:"Contribute",permalink:"/scout-soroban/docs/contribute"}},c={},l=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Example\u200b",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}],u={toc:l},d="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"iterators-over-indexing"},"Iterators-over-indexing"),(0,o.kt)("h3",{id:"what-it-does"},"What it does"),(0,o.kt)("p",null,"It warns if the for loop uses indexing instead of iterator. If the indexing goes to length it will not raise a warning."),(0,o.kt)("h3",{id:"why-is-this-bad"},"Why is this bad?"),(0,o.kt)("p",null,"Accessing a vector by index is slower than using an iterator. Also, if the index is out of bounds, it will panic."),(0,o.kt)("h3",{id:"example"},"Example\u200b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    pub fn sum(e: Env) -> Result<i32, Error> {\n        let mut ret = 0_i32;\n        let vec = e\n            .storage()\n            .instance()\n            .get::<DataKey, Vec<i32>>(&DataKey::Data)\n            .ok_or(Error::NoData)?;\n        for i in 0..4 {\n            ret = ret\n                .checked_add(vec.get(i).ok_or(Error::NoData)?)\n                .ok_or(Error::IntegerOverflow)?;\n        }\n        Ok(ret)\n    }\n")),(0,o.kt)("p",null,"Use instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    pub fn sum(e: Env) -> Result<i32, Error> {\n        let mut ret = 0_i32;\n        let vec = e\n            .storage()\n            .instance()\n            .get::<DataKey, Vec<i32>>(&DataKey::Data)\n            .ok_or(Error::NoData)?;\n        for i in vec {\n            ret = ret.checked_add(i).ok_or(Error::IntegerOverflow)?;\n        }\n        Ok(ret)\n    }\n")),(0,o.kt)("h3",{id:"implementation"},"Implementation"),(0,o.kt)("p",null,"The detector's implementation can be found at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/iterators-over-indexing"},"this link"),"."))}p.isMDXComponent=!0}}]);