"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[8294],{9613:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(9496);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},v=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(r),v=o,f=u["".concat(s,".").concat(v)]||u[v]||p[v]||a;return r?n.createElement(f,i(i({ref:t},d),{},{components:r})):n.createElement(f,i({ref:t},d))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=v;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}v.displayName="MDXCreateElement"},6125:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=r(2564),o=(r(9496),r(9613));const a={},i="DoS unexpected revert with vector",c={unversionedId:"detectors/dos-unexpected-revert-with-vector",id:"detectors/dos-unexpected-revert-with-vector",title:"DoS unexpected revert with vector",description:"What it does",source:"@site/docs/detectors/17-dos-unexpected-revert-with-vector.md",sourceDirName:"detectors",slug:"/detectors/dos-unexpected-revert-with-vector",permalink:"/scout-soroban/docs/detectors/dos-unexpected-revert-with-vector",draft:!1,editUrl:"https://github.com/CoinFabrik/scout-soroban/docs/detectors/17-dos-unexpected-revert-with-vector.md",tags:[],version:"current",sidebarPosition:17,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Assert  violation",permalink:"/scout-soroban/docs/detectors/assert-violation"},next:{title:"Contribute",permalink:"/scout-soroban/docs/contribute"}},s={},l=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Known problems",id:"known-problems",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}],d={toc:l},u="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dos-unexpected-revert-with-vector"},"DoS unexpected revert with vector"),(0,o.kt)("h3",{id:"what-it-does"},"What it does"),(0,o.kt)("p",null,"Checks for array pushes without access control."),(0,o.kt)("h3",{id:"why-is-this-bad"},"Why is this bad?"),(0,o.kt)("p",null,"Arrays have a maximum size according to the storage cell. If the array is full, the push will revert. This can be used to prevent the execution of a function."),(0,o.kt)("h3",{id:"known-problems"},"Known problems"),(0,o.kt)("p",null,"If the owner validation is performed in an auxiliary function, the warning will be shown, resulting in a false positive."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    pub fn add_candidate(env: Env, candidate: Address, caller: Address) -> Result<(), URError> {\n        caller.require_auth();\n        let mut state = Self::get_state(env.clone());\n        if Self::vote_ended(env.clone()) {\n            return Err(URError::VoteEnded);\n        }\n        if state.already_voted.contains_key(caller.clone()) {\n            return Err(URError::AccountAlreadyVoted); \n        } else {\n            state.candidates.push_back(candidate.clone());\n            state.votes.set(candidate, 0);\n            Ok(())\n        }\n    }\n\n")),(0,o.kt)("p",null,"Use instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"}," pub fn add_candidate(env: Env, candidate: Address, caller: Address) -> Result<(), URError> {\n      caller.require_auth();\n      let mut state = Self::get_state(env.clone());\n      if Self::vote_ended(env.clone()) {\n          return Err(URError::VoteEnded);\n      }\n      if Self::account_has_voted(env.clone(), caller.clone()) {\n          return Err(URError::AccountAlreadyVoted); \n      } else {\n          env.storage().instance().set(&DataKey::Candidate(candidate.clone()), &Candidate{votes: 0});\n          state.total_candidates += 1; \n          env.storage().instance().set(&DataKey::State, &state);\n          Ok(())\n      }\n}\n")),(0,o.kt)("h3",{id:"implementation"},"Implementation"),(0,o.kt)("p",null,"The detector's implementation can be found at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/dos-unexpected-revert-with-vector"},"this link"),"."))}p.isMDXComponent=!0}}]);