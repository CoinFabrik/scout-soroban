"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[8294],{9613:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},v=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(n),v=a,m=u["".concat(s,".").concat(v)]||u[v]||p[v]||o;return n?r.createElement(m,c(c({ref:t},d),{},{components:n})):r.createElement(m,c({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=v;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}v.displayName="MDXCreateElement"},6125:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(2564),a=(n(9496),n(9613));const o={},c="DoS unexpected revert with vector",i={unversionedId:"detectors/dos-unexpected-revert-with-vector",id:"detectors/dos-unexpected-revert-with-vector",title:"DoS unexpected revert with vector",description:"What it does",source:"@site/docs/detectors/17-dos-unexpected-revert-with-vector.md",sourceDirName:"detectors",slug:"/detectors/dos-unexpected-revert-with-vector",permalink:"/scout-soroban/docs/detectors/dos-unexpected-revert-with-vector",draft:!1,editUrl:"https://github.com/CoinFabrik/scout-soroban/docs/detectors/17-dos-unexpected-revert-with-vector.md",tags:[],version:"current",sidebarPosition:17,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Unprotected mapping operation",permalink:"/scout-soroban/docs/detectors/unprotected-mapping-operation"},next:{title:"Unrestricted Transfer From",permalink:"/scout-soroban/docs/detectors/unrestricted-transfer-from"}},s={},l=[{value:"What it does",id:"what-it-does",level:3},{value:"Why is this bad?",id:"why-is-this-bad",level:3},{value:"Known problems",id:"known-problems",level:3},{value:"Example",id:"example",level:3},{value:"Implementation",id:"implementation",level:3}],d={toc:l},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dos-unexpected-revert-with-vector"},"DoS unexpected revert with vector"),(0,a.kt)("h3",{id:"what-it-does"},"What it does"),(0,a.kt)("p",null,"Checks for array pushes without access control."),(0,a.kt)("h3",{id:"why-is-this-bad"},"Why is this bad?"),(0,a.kt)("p",null,"Arrays have a maximum size according to the storage cell. If the array is full, the push will revert. This can be used to prevent the execution of a function."),(0,a.kt)("h3",{id:"known-problems"},"Known problems"),(0,a.kt)("p",null,"If the owner validation is performed in an auxiliary function, the warning will be shown, resulting in a false positive."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn add_candidate(env: Env, candidate: Address, caller: Address) -> Result<(), URError> {\n    let mut state = Self::get_state(env.clone());\n    if Self::vote_ended(env.clone()) {\n        return Err(URError::VoteEnded);\n    }\n    if state.already_voted.contains_key(caller.clone()) {\n        return Err(URError::AccountAlreadyVoted); \n    } else {\n        state.candidates.push_back(candidate.clone());\n        state.votes.set(candidate, 0);\n        Ok(())\n    }\n}\n")),(0,a.kt)("p",null,"Use instead:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn add_candidate(env: Env, candidate: Address, caller: Address) -> Result<(), URError> {\n    let mut state = Self::get_state(env.clone());\n    // Require authorization from an admin set at contract initalization.\n    state.admin.require_auth(); \n    if Self::vote_ended(env.clone()) {\n        return Err(URError::VoteEnded);\n    }\n    if state.already_voted.contains_key(caller.clone()) {\n        return Err(URError::AccountAlreadyVoted); \n    } else {\n        state.candidates.push_back(candidate.clone());\n        state.votes.set(candidate, 0);\n        Ok(())\n    }\n}\n")),(0,a.kt)("p",null,"Or"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"}," pub fn add_candidate(env: Env, candidate: Address, caller: Address) -> Result<(), URError> {\n      caller.require_auth();\n      let mut state = Self::get_state(env.clone());\n      if Self::vote_ended(env.clone()) {\n          return Err(URError::VoteEnded);\n      }\n      if Self::account_has_voted(env.clone(), caller.clone()) {\n          return Err(URError::AccountAlreadyVoted); \n      } else {\n          // Replace the Vector with a mapping like structure made with a DataKey enum.\n          env.storage().instance().set(&DataKey::Candidate(candidate.clone()), &Candidate{votes: 0});\n          state.total_candidates += 1; \n          env.storage().instance().set(&DataKey::State, &state);\n          Ok(())\n      }\n}\n")),(0,a.kt)("h3",{id:"implementation"},"Implementation"),(0,a.kt)("p",null,"The detector's implementation can be found at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/dos-unexpected-revert-with-vector"},"this link"),"."))}p.isMDXComponent=!0}}]);