"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[845],{9613:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},u=Object.keys(e);for(r=0;r<u.length;r++)t=u[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)t=u[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,u=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||u;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var u=t.length,i=new Array(u);i[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:a,i[1]=o;for(var l=2;l<u;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7020:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>u,metadata:()=>o,toc:()=>l});var r=t(2564),a=(t(9496),t(9613));const u={},i="Unused return enum",o={unversionedId:"detectors/unused-return-enum",id:"detectors/unused-return-enum",title:"Unused return enum",description:"Description",source:"@site/docs/detectors/13-unused-return-enum.md",sourceDirName:"detectors",slug:"/detectors/unused-return-enum",permalink:"/scout-soroban/docs/detectors/unused-return-enum",draft:!1,editUrl:"https://github.com/CoinFabrik/scout-soroban/docs/detectors/13-unused-return-enum.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Soroban version",permalink:"/scout-soroban/docs/detectors/soroban-version"},next:{title:"Iterators over indexing",permalink:"/scout-soroban/docs/detectors/iterators-over-indexing"}},s={},l=[{value:"Description",id:"description",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"Issue example",id:"issue-example",level:2},{value:"Remediated example",id:"remediated-example",level:2},{value:"How is it detected?",id:"how-is-it-detected",level:2}],c={toc:l},d="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"unused-return-enum"},"Unused return enum"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Vulnerability Category: ",(0,a.kt)("inlineCode",{parentName:"li"},"Validations and error handling")),(0,a.kt)("li",{parentName:"ul"},"Vulnerability Severity: ",(0,a.kt)("inlineCode",{parentName:"li"},"Minor")),(0,a.kt)("li",{parentName:"ul"},"Detectors: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/unused-return-enum"},(0,a.kt)("inlineCode",{parentName:"a"},"unused-return-enum"))),(0,a.kt)("li",{parentName:"ul"},"Test Cases: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unused-return-enum/unused-return-enum-1"},(0,a.kt)("inlineCode",{parentName:"a"},"unused-return-enum-1"))," ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unused-return-enum/unused-return-enum-2"},(0,a.kt)("inlineCode",{parentName:"a"},"unused-return-enum-2")))),(0,a.kt)("p",null,"Soroban\t messages can return a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum with a custom error type. This is useful for the caller to know what went wrong when the message fails."),(0,a.kt)("p",null,"The definition in Rust of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n")),(0,a.kt)("h2",{id:"why-is-this-bad"},"Why is this bad?"),(0,a.kt)("p",null,"If either variant (",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Err"),") is not used in the code, it could indicate that the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," type is unnecessary and that the code could be simplified. Alternatively, it might suggest a bug where a possible outcome is not being handled properly."),(0,a.kt)("h2",{id:"issue-example"},"Issue example"),(0,a.kt)("p",null,"Consider the following ",(0,a.kt)("inlineCode",{parentName:"p"},"Soroban")," contract:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord)]\n#[repr(u32)]\npub enum Error {\n    /// An overflow was produced.\n    Overflow = 1,\n}\n\n\n\npub fn get_percentage_difference(balance1: u128, balance2: u128) -> Result<u128, Error> {\n        let absolute_difference = balance1.abs_diff(balance2);\n        let sum = balance1 + balance2;\n\n        match 100u128.checked_mul(absolute_difference / sum) {\n            Some(result) => result,\n            None => panic!("Overflow"),\n        };\n\n        Err(Error::Overflow)\n    }   \n')),(0,a.kt)("p",null,"This is a ",(0,a.kt)("inlineCode",{parentName:"p"},"Soroban")," message that returns the percentage difference between two values."),(0,a.kt)("p",null,"The function then returns an error enum variant ",(0,a.kt)("inlineCode",{parentName:"p"},"TradingPairErrors::Overflow"),".\nHowever, the function never returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum variant ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok"),", thus always\nfailing."),(0,a.kt)("p",null,"The vulnerable code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unused-return-enum/unused-return-enum-1/remediated-example"},"here"),"."),(0,a.kt)("h2",{id:"remediated-example"},"Remediated example"),(0,a.kt)("p",null,"This function could be easily fixed by returning a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum variant ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok"),"\nwhen the percentage difference is calculated successfully. By providing a check in\nthe linter that ensures that all the variants of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," enum are used, this\nbug could have been avoided. This is shown in the example below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord)]\n#[repr(u32)]\npub enum Error {\n    /// An overflow was produced.\n    Overflow = 1,\n}\n\n\npub fn get_percentage_difference(balance1: u128, balance2: u128) -> Result<u128, Error> {\n        let absolute_difference = balance1.abs_diff(balance2);\n        let sum = balance1 + balance2;\n\n        match 100u128.checked_mul(absolute_difference / sum) {\n            Some(result) => Ok(result),\n            None => Err(Error::Overflow),\n        }\n    }\n")),(0,a.kt)("p",null,"The remediated code example can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/unused-return-enum//unused-return-enum-1/remediated-example"},"here"),"."),(0,a.kt)("h2",{id:"how-is-it-detected"},"How is it detected?"),(0,a.kt)("p",null,"It warns if a function that returns a Result type does not return the Result enum variant (Ok/Err)."))}p.isMDXComponent=!0}}]);