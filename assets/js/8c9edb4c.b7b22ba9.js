"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[8247],{9613:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>v});var n=r(9496);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(r),m=i,v=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return r?n.createElement(v,a(a({ref:t},d),{},{components:r})):n.createElement(v,a({ref:t},d))}));function v(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4835:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(2564),i=(r(9496),r(9613));const o={},a="Iterators over indexing",s={unversionedId:"detectors/iterators-over-indexing",id:"detectors/iterators-over-indexing",title:"Iterators over indexing",description:"Description",source:"@site/docs/detectors/14-iterators-over-indexing.md",sourceDirName:"detectors",slug:"/detectors/iterators-over-indexing",permalink:"/scout-soroban/docs/detectors/iterators-over-indexing",draft:!1,editUrl:"https://github.com/CoinFabrik/scout-soroban/docs/detectors/14-iterators-over-indexing.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Unused return enum",permalink:"/scout-soroban/docs/detectors/unused-return-enum"},next:{title:"Assert violation",permalink:"/scout-soroban/docs/detectors/assert-violation"}},l={},c=[{value:"Description",id:"description",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"Issue example",id:"issue-example",level:2},{value:"Remediated example",id:"remediated-example",level:2},{value:"How is it detected?",id:"how-is-it-detected",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"iterators-over-indexing"},"Iterators over indexing"),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Category: ",(0,i.kt)("inlineCode",{parentName:"li"},"Best practices")),(0,i.kt)("li",{parentName:"ul"},"Severity: ",(0,i.kt)("inlineCode",{parentName:"li"},"Enhancement")),(0,i.kt)("li",{parentName:"ul"},"Detector: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/iterators-over-indexing"},(0,i.kt)("inlineCode",{parentName:"a"},"iterators-over-indexing"))),(0,i.kt)("li",{parentName:"ul"},"Test Cases: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/iterators-over-indexing/iterators-over-indexing-1"},(0,i.kt)("inlineCode",{parentName:"a"},"iterators-over-indexing-1")))),(0,i.kt)("p",null,"In Rust, sequences can be traversed using iterators or direct indexing. However, the least efficient way is through direct indexing."),(0,i.kt)("h2",{id:"why-is-this-bad"},"Why is this bad?"),(0,i.kt)("p",null,"When you iterate over a data structure with fixed limits in a Soroban smart contract, exceeding those limits can cause the contract to panic, potentially leading to errors or unexpected behavior."),(0,i.kt)("h2",{id:"issue-example"},"Issue example"),(0,i.kt)("p",null,"Consider the following ",(0,i.kt)("inlineCode",{parentName:"p"},"Soroban")," contract:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"   pub fn sum(e: Env) -> Result<i32, Error> {\n        let mut ret = 0_i32;\n        let vec = e\n            .storage()\n            .instance()\n            .get::<DataKey, Vec<i32>>(&DataKey::Data)\n            .ok_or(Error::NoData)?;\n        for i in 0..4 {\n            ret = ret\n                .checked_add(vec.get(i).ok_or(Error::NoData)?)\n                .ok_or(Error::IntegerOverflow)?;\n        }\n        Ok(ret)\n    }\n")),(0,i.kt)("p",null,"The problem arises in the for loop. If ",(0,i.kt)("inlineCode",{parentName:"p"},"vec")," has less than 4 elements, the contract will panic."),(0,i.kt)("p",null,"The code example can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/iterators-over-indexing/iterators-over-indexing-1/vulnerable-example"},"here"),"."),(0,i.kt)("h2",{id:"remediated-example"},"Remediated example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"     pub fn sum(e: Env) -> Result<i32, Error> {\n        let mut ret = 0_i32;\n        let vec = e\n            .storage()\n            .instance()\n            .get::<DataKey, Vec<i32>>(&DataKey::Data)\n            .ok_or(Error::NoData)?;\n        for i in vec {\n            ret = ret.checked_add(i).ok_or(Error::IntegerOverflow)?;\n        }\n        Ok(ret)\n    }\n")),(0,i.kt)("p",null,"Instead of using a fixed loop, iterate through the vector itself using ",(0,i.kt)("inlineCode",{parentName:"p"},"for i in vec"),". This ensures the loop iterates only for valid elements present in the vector."),(0,i.kt)("p",null,"The remediated code example can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/iterators-over-indexing/iterators-over-indexing-1/remediated-example"},"here"),"."),(0,i.kt)("h2",{id:"how-is-it-detected"},"How is it detected?"),(0,i.kt)("p",null,"It warns if the for loop uses indexing instead of iterator. If the indexing goes to length it will not raise a warning."))}p.isMDXComponent=!0}}]);