"use strict";(self.webpackChunkscout=self.webpackChunkscout||[]).push([[6337],{9613:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>f});var r=i(9496);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(i),m=n,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return i?r.createElement(f,a(a({ref:t},d),{},{components:i})):r.createElement(f,a({ref:t},d))}));function f(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=i.length,a=new Array(o);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,a[1]=l;for(var p=2;p<o;p++)a[p]=i[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,i)}m.displayName="MDXCreateElement"},146:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=i(2564),n=(i(9496),i(9613));const o={},a="Divide before multiply",l={unversionedId:"detectors/divide-before-multiply",id:"detectors/divide-before-multiply",title:"Divide before multiply",description:"Description",source:"@site/docs/detectors/1-divide-before-multiply.md",sourceDirName:"detectors",slug:"/detectors/divide-before-multiply",permalink:"/scout-soroban/docs/detectors/divide-before-multiply",draft:!1,editUrl:"https://github.com/CoinFabrik/scout-soroban/docs/detectors/1-divide-before-multiply.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Detectors",permalink:"/scout-soroban/docs/detectors/"},next:{title:"Unsafe unwrap",permalink:"/scout-soroban/docs/detectors/unsafe-unwrap"}},s={},p=[{value:"Description",id:"description",level:2},{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"Issue example",id:"issue-example",level:2},{value:"Remediated example",id:"remediated-example",level:2},{value:"How is it detected?",id:"how-is-it-detected",level:2},{value:"References",id:"references",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...i}=e;return(0,n.kt)(c,(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"divide-before-multiply"},"Divide before multiply"),(0,n.kt)("h2",{id:"description"},"Description"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Category: ",(0,n.kt)("inlineCode",{parentName:"li"},"Arithmetic")),(0,n.kt)("li",{parentName:"ul"},"Severity: ",(0,n.kt)("inlineCode",{parentName:"li"},"Medium")),(0,n.kt)("li",{parentName:"ul"},"Detectors: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/detectors/divide-before-multiply"},(0,n.kt)("inlineCode",{parentName:"a"},"divide-before-multiply"))),(0,n.kt)("li",{parentName:"ul"},"Test Cases: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/divide-before-multiply/divide-before-multiply-1"},(0,n.kt)("inlineCode",{parentName:"a"},"divide-before-multiply-1"))," ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/divide-before-multiply/divide-before-multiply-2"},(0,n.kt)("inlineCode",{parentName:"a"},"divide-before-multiply-2"))," ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/divide-before-multiply/divide-before-multiply-3"},(0,n.kt)("inlineCode",{parentName:"a"},"divide-before-multiply-3")))),(0,n.kt)("p",null,"In Rust, the order of operations can influence the precision of the result, especially in integer arithmetic. "),(0,n.kt)("h2",{id:"why-is-this-bad"},"Why is this bad?"),(0,n.kt)("p",null,"Performing a division operation before a multiplication can lead to a loss of precision as division between integers might return zero. "),(0,n.kt)("h2",{id:"issue-example"},"Issue example"),(0,n.kt)("p",null,"Consider the following ",(0,n.kt)("inlineCode",{parentName:"p"},"Soroban")," contract:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"\n pub fn split_profit(percentage: u64, total_profit: u64) -> u64 {\n    (percentage / 100) * total_profit\n}\n\n")),(0,n.kt)("p",null,"In this contract, the ",(0,n.kt)("inlineCode",{parentName:"p"},"split_profit")," function divides the ",(0,n.kt)("inlineCode",{parentName:"p"},"percentage")," by ",(0,n.kt)("inlineCode",{parentName:"p"},"100")," before multiplying it with ",(0,n.kt)("inlineCode",{parentName:"p"},"total_profit"),". This could lead to a loss of precision if ",(0,n.kt)("inlineCode",{parentName:"p"},"percentage")," is less than ",(0,n.kt)("inlineCode",{parentName:"p"},"100")," as the division would return ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),". This could lead to incorrect calculations and potential financial loss in a real-world smart contract."),(0,n.kt)("p",null,"The code example can be found ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/divide-before-multiply/divide-before-multiply-1/vulnerable-example"},"here"),"."),(0,n.kt)("h2",{id:"remediated-example"},"Remediated example"),(0,n.kt)("p",null,"Reverse the order of operations to ensure multiplication occurs before division."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"\n pub fn split_profit(&self, percentage: u64, total_profit: u64) -> u64 {\n            (percentage * total_profit) / 100\n        }\n        \n")),(0,n.kt)("p",null,"The remediated code example can be found ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/CoinFabrik/scout-soroban/tree/main/test-cases/divide-before-multiply/divide-before-multiply-1/remediated-example"},"here"),"."),(0,n.kt)("h2",{id:"how-is-it-detected"},"How is it detected?"),(0,n.kt)("p",null,"Checks the existence of a division before a multiplication."),(0,n.kt)("h2",{id:"references"},"References"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/stable/reference/expressions/operator-expr.html#arithmetic-and-logical-binary-operators"},"Rust documentation: ",(0,n.kt)("inlineCode",{parentName:"a"},"Integer Division"))))}u.isMDXComponent=!0}}]);